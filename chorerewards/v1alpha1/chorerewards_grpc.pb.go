// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chorerewardsv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChoreRewardsServiceClient is the client API for ChoreRewardsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChoreRewardsServiceClient interface {
	// CreateCategory
	//
	// Creates a new Category
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	// ListCategories
	//
	// Lists Categories
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	// CreateTask
	//
	// Creates a new Task
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// ListTasks
	//
	// Lists Tasks
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// AddTaskToFeed
	//
	// Adds a Task to the TaskFeed
	AddTaskToFeed(ctx context.Context, in *AddTaskToFeedRequest, opts ...grpc.CallOption) (*AddTaskToFeedResponse, error)
	// ListTasksFeed
	//
	// Lists Tasks Feed
	ListTasksFeed(ctx context.Context, in *ListTasksFeedRequest, opts ...grpc.CallOption) (*ListTasksFeedResponse, error)
	// CreateUser
	//
	// Creates a new User
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// ListUsers
	//
	// Lists Users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Login
	//
	// Authenticates and provides a auth token if successful
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type choreRewardsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChoreRewardsServiceClient(cc grpc.ClientConnInterface) ChoreRewardsServiceClient {
	return &choreRewardsServiceClient{cc}
}

func (c *choreRewardsServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreRewardsServiceClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreRewardsServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreRewardsServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreRewardsServiceClient) AddTaskToFeed(ctx context.Context, in *AddTaskToFeedRequest, opts ...grpc.CallOption) (*AddTaskToFeedResponse, error) {
	out := new(AddTaskToFeedResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/AddTaskToFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreRewardsServiceClient) ListTasksFeed(ctx context.Context, in *ListTasksFeedRequest, opts ...grpc.CallOption) (*ListTasksFeedResponse, error) {
	out := new(ListTasksFeedResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/ListTasksFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreRewardsServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreRewardsServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreRewardsServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/chorerewards.v1alpha1.ChoreRewardsService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChoreRewardsServiceServer is the server API for ChoreRewardsService service.
// All implementations should embed UnimplementedChoreRewardsServiceServer
// for forward compatibility
type ChoreRewardsServiceServer interface {
	// CreateCategory
	//
	// Creates a new Category
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	// ListCategories
	//
	// Lists Categories
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	// CreateTask
	//
	// Creates a new Task
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// ListTasks
	//
	// Lists Tasks
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// AddTaskToFeed
	//
	// Adds a Task to the TaskFeed
	AddTaskToFeed(context.Context, *AddTaskToFeedRequest) (*AddTaskToFeedResponse, error)
	// ListTasksFeed
	//
	// Lists Tasks Feed
	ListTasksFeed(context.Context, *ListTasksFeedRequest) (*ListTasksFeedResponse, error)
	// CreateUser
	//
	// Creates a new User
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// ListUsers
	//
	// Lists Users
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Login
	//
	// Authenticates and provides a auth token if successful
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

// UnimplementedChoreRewardsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChoreRewardsServiceServer struct {
}

func (UnimplementedChoreRewardsServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedChoreRewardsServiceServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedChoreRewardsServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedChoreRewardsServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedChoreRewardsServiceServer) AddTaskToFeed(context.Context, *AddTaskToFeedRequest) (*AddTaskToFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskToFeed not implemented")
}
func (UnimplementedChoreRewardsServiceServer) ListTasksFeed(context.Context, *ListTasksFeedRequest) (*ListTasksFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasksFeed not implemented")
}
func (UnimplementedChoreRewardsServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedChoreRewardsServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedChoreRewardsServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

// UnsafeChoreRewardsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChoreRewardsServiceServer will
// result in compilation errors.
type UnsafeChoreRewardsServiceServer interface {
	mustEmbedUnimplementedChoreRewardsServiceServer()
}

func RegisterChoreRewardsServiceServer(s *grpc.Server, srv ChoreRewardsServiceServer) {
	s.RegisterService(&_ChoreRewardsService_serviceDesc, srv)
}

func _ChoreRewardsService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoreRewardsService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoreRewardsService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoreRewardsService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoreRewardsService_AddTaskToFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskToFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).AddTaskToFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/AddTaskToFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).AddTaskToFeed(ctx, req.(*AddTaskToFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoreRewardsService_ListTasksFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).ListTasksFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/ListTasksFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).ListTasksFeed(ctx, req.(*ListTasksFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoreRewardsService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoreRewardsService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoreRewardsService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreRewardsServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chorerewards.v1alpha1.ChoreRewardsService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreRewardsServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChoreRewardsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chorerewards.v1alpha1.ChoreRewardsService",
	HandlerType: (*ChoreRewardsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _ChoreRewardsService_CreateCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _ChoreRewardsService_ListCategories_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _ChoreRewardsService_CreateTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _ChoreRewardsService_ListTasks_Handler,
		},
		{
			MethodName: "AddTaskToFeed",
			Handler:    _ChoreRewardsService_AddTaskToFeed_Handler,
		},
		{
			MethodName: "ListTasksFeed",
			Handler:    _ChoreRewardsService_ListTasksFeed_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ChoreRewardsService_CreateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _ChoreRewardsService_ListUsers_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ChoreRewardsService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chorerewards/v1alpha1/chorerewards.proto",
}
